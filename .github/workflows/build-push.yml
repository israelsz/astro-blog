name: Build and Push Docker Image to GHCR

# Trigger: Run this on every push to the 'main' branch
on:
  push:
    branches:
      - 'main'

# Environment: Define variables
env:
  # The name of the Docker image
  IMAGE_NAME: ${{ github.repository }}
  GITOPS_REPO: israelsz/argocd-gitops # ArgoCD repo
  GITOPS_BRANCH: main                 # Branch to update in ArgoCD repo
  GITOPS_VALUES_PATH: gitops/dev-apps/astro-blog/values.yaml # Path to values file

# Jobs
jobs:
  build-and-push:
    runs-on: ubuntu-latest 

    # Permissions: Give this job permission to write to GHCR
    permissions:
      contents: read
      packages: write

    steps:
      # Check out your code from the repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up QEMU for multi-platform builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      #  Log in to GitHub Container Registry (GHCR)
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          # GITHUB_TOKEN is a secret automatically provided by GitHub
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (like tags and labels) for Docker
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.IMAGE_NAME }}
          tags: |
            # tag with'latest'
            type=raw,value=latest,enable=true
            # tag the new commit SHA
            type=sha,format=short,prefix=,suffix=-astro,enable=true

      #  Build and push the Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}


      # -- Update GitOps repository with new image tag --
      - name: Extract Commit SHA Tag
        id: get_sha_tag
        # Extract the tag like 'xxxxxxx-astro' from the multi-line output
        run: |
          SHA_TAG=$(echo "${{ steps.meta.outputs.tags }}" | grep -- '-astro' | head -n1 | awk -F ':' '{print $2}')
          echo "tag=${SHA_TAG}" >> $GITHUB_OUTPUT

      - name: Checkout GitOps repository (Repo1)
        uses: actions/checkout@v4
        with:
          repository: ${{ env.GITOPS_REPO }}
          ref: ${{ env.GITOPS_BRANCH }}
          token: ${{ secrets.GIT_OPS_PAT }} # Use the PAT
          path: gitops-repo # Checkout into a sub-directory

      - name: Update image tag in values.yaml
        run: |
          NEW_TAG="${{ steps.get_sha_tag.outputs.tag }}"
          sed -i -E "s|^(\s*tag:\s*).*|\1\"${NEW_TAG}\"|" gitops-repo/${{ env.GITOPS_VALUES_PATH }}
          echo "Updated tag to ${NEW_TAG} in gitops-repo/${{ env.GITOPS_VALUES_PATH }}"

      - name: Commit and push changes to GitOps repo
        run: |
          cd gitops-repo
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
          # Check if there are changes to commit
          if git diff --quiet HEAD -- ${{ env.GITOPS_VALUES_PATH }}; then
            echo "No changes detected in values.yaml. Skipping commit."
          else
            git add ${{ env.GITOPS_VALUES_PATH }}
            git commit -m "ci(astro-blog): Update image tag to ${{ steps.get_sha_tag.outputs.tag }}"
            git push origin ${{ env.GITOPS_BRANCH }}
            echo "Pushed updated values.yaml to GitOps repo."
          fi
        env:
          # Use the PAT for pushing too (implicitly used by checkout action's token)
          GITHUB_TOKEN: ${{ secrets.GIT_OPS_PAT }}